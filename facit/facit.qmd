---
title: "Introduktion till Python - Facit"
author: "Filip Edström"
format: 
  html:
    embed-resources: true
    toc: true
---

## Uppgift 1 - grunder och syntax

### Tilldelning



**Python**

```{python}
# Assigning a value to a variable
x = 10
y = "hello"
```

### Datastrukturer och indexering

**Python**

```{python}
# List
v = [1, 2, 3]
print(v)
# List
l = ["Apple", "Orange", "Pear"]
print(l)
# Dictionary
d = {"apple": "crunchy", "orange": "juicy", "pear": "sweet"}
print(d)
```

### Loopar och if/else-satser

**Python**

```{python}
numbers = range(1, 10)
for number in numbers:
    print(number)
    if number == 5:
        print("Five")
```

### Funktioner

**Python**

```{python}
def multiply(x, y):
    return x * y
multiply(2, 22)
```

### Paket

**Python**

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load data frame
penguins = pd.read_csv("penguins.csv")
# Print head of dataframe
penguins.head()
# Print head of species column
penguins["species"].head()
# Compute mean of flipper_length_mm
np.mean(penguins["flipper_length_mm"])
# Plot bill_length_mm vs bill_depth_mm
plt.scatter(penguins["bill_length_mm"], penguins["bill_depth_mm"])
plt.show()
```

### Objektorienterad programmering

**Python**

```{python}
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement this method")

class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

# Demonstrating Polymorphism
animals = [Dog("Buddy"), Cat("Whiskers")]

for animal in animals:
    print(animal.speak())

```

## Uppgift 2 - Centrala gränsvärdessatsen

Not implemented yet.