---
title: "Introduktion till Python"
format: 
  html:
    embed-resources: true
    toc: true
---

I den här laborationen introducerar vi grundläggande Python och visar på några några skillnader mot R. Laborationen är tänkt att ge er en introduktion till ett mer datavetenskapligt programmeringsspråk som också är mycket användbart för statistik och data science.

## Komma igång

Ni kan välja flera olika sätt att köra Python. Har ni redan ett sätt som ni föredrar går det bra, men förslagsvis så skriver ni er kod i notebook-format. Nedan är tre förslag på sätt att skriva er kod.

**1. Google Colab**

Google Colab är ett enkelt sätt att komma igång med Python i ett notebook format och kräver ingen installation men kräver ett Google-konto(?).

**2. RStudio**

Att köra Python i RStudio är inte optimalt, eftersom Python-koden körs via `reticulate`-paketet, men det är ett bra sätt att komma igång snabbt. Ni behöver installera både Python (se guide nedan) och R-paketet `reticulate`.

``` r
install.packages("reticulate")
```

Ni kan sen öppna en ny fil och välja "Python script" för att köra Python, direkt i RStudio.

**3. Visual Studio eller annan editor**

Om ni vill skriva mer Python-kod i framtiden kan det vara värt att installera Python på er dator och använda en annan editor, t.ex. Microsofts Visual Studio. Ni behöver installera Python (se guide nedan) och förslagsvis en IDE.

### Installations guide för Python

1.  Gå till och scrolla längst ned till filer. Välj den fil som passar ditt operativsystem.
2.  Installera Python enligt installations "wizarden".
3.  Installera nödvändiga Python-paket (se [här](https://packaging.python.org/en/latest/tutorials/installing-packages/) för mer detaljerade instruktioner):
    -   **Windows**: Öppna "Command Prompt" och skriv in följande kommando `py -m pip install --upgrade pip numpy pandas matplotlib`
    -   **Mac**: Öppna "Terminal" och skriv in följande kommando `python3 -m pip install --upgrade pip numpy pandas matplotlib`

Python och de paket vi behöver ska nu vara installerade på er dator.

## Stil

R kod följer allt för sällan en enhetlig stil. Python har en [stilguide](https://peps.python.org/pep-0008/) som ni inte behöver läsa, men som är nyttig om ni vill skriva mer Python-kod. Stil kan variera, och om ni skriver kod i ett sammanhang som redan har en stil så bör ni följa den. Nedan listas några enkla regler att följa som är vanligt förekommande i flera programmeringsspråk. Ni förväntas följa dem i den här labben.

-   Variabel- och funktionsnamn följer `lower_case_with_underscore`
-   Klassnamn följer `CapWords`
-   4 mellanslags indenteringsavstånd

## Uppgift 1 - grunder och syntax

Syntax inom programmering är de regler och strukturer som måste följas när du skriver kod för att programmet ska förstås och fungera korrekt. Syntaxen skiljer sig generellt mellan olika programmeringsspråk, även om det finns generella mönster som förekommer i alla språk så som tilldelning (\<-), loopar, och if/else-satser. Pythons syntax är framtaget för att vara främja läsbarheten i koden och ger en möjlighet att skriva väldigt läsbar kod. Utöver syntax så skiljer sig R och Python åt på flera sätt, R är inriktat mot statistik och Python är mer generellt, ett så kallat "general purpose programming language". Python är skrivet mer datavetenskapligt, och innehåller bland annat fler explicita datastrukturer och möjligheten till at skriva objektorienterad kod. I den här uppgiften ska ni skriva om kod från R kod till Python kod givet de skillnader i syntax som beskrivs och enligt de möjligheter som Python erbjuder.

Ni kan lösa följande uppgifter antingen genom att skriva koden i Google Colab, använd i så fall en cell till en uppgift, eller i RStudio med hjälp av `reticulate`, eller i någon annan IDE, så länge ni kan visa upp, förklara, och köra koden. Väljer ni att lösa uppgiften i RStudio kan ni använda det här dokumentet och skriva in era lösningar, se exempel i första uppgiften.

**Notera:** Output kan skilja sig mellan R och Python. Ni ska skriva kod som har samma funktion i båda språken, inte nödvändigtvis identisk output. T.ex. så skiljer sig output från en lista i R mot en "dictionary" i Python.

### (a) Tilldelning

I R används `<-` för att tilldela variabler värden medan Python istället använder `=`. Skriv om följande kod till Python kod och se till att den går att köra.

**R**

```{r}
# Assigning a value to a variable
x <- 10
y <- "hello"
```

**Python**

```{python}
#| eval: false
# Write your solution here
```

### (b) Datastrukturer och indexering

En datastruktur är ett objekt som strukturerar data och möjliggör sökning, kategorisering, och lagring av information. I R används primärt två datastrukturer, vektorer och listor. I Python finns inga vektorer, bara listor, men också fler datatyper som "tuples" och "dictionaries". Använd internet, LLMs, eller [den här dokumentationen](https://docs.python.org/3/tutorial/datastructures.html#) för att läsa mer om listor, tuples, och dictionaries i Python. Gör sedan följande uppgifter:

1.  Skriv sedan om den här koden till Python kod med rätt datatyper (datastrukturer).
2.  Redogör för skillnaden mellan en lista och en tuple.

Tips: För att se en värdet av en variabel i Python, använd funktionen `print` (om ni använder notebooks så kan ni skriva ut variabeln, precis som i R).

**R**

```{r}
# Vector
v <- c(1, 2, 3)
v
# List
l <- list("Apple", "Orange", "Pear")
l
# Dictionary
d <- list(apple = "crunchy", orange = "juicy", pear = "sweet")
d
```

### (c) Loopar och if/else-satser

Python använder inte "måsvingar" som i R, istället används indentering för att bestämma vilken kod som exekveras inom en loop eller en if-sats. Indentering är antalet mellanrum innan koden skrivs. Det är alltid snyggt att indentera innehåll i loopar eller if-satser, men i Python är det en del av syntaxen. Likt R så fungerar for-looparna som "foreach"-loopar, där det man "loopar" över är innehållet i en datastruktur, till exempel en vektor eller lista. Läs på internet, använd LLMs, eller kolla på [den här dokumentationen](https://docs.python.org/3/tutorial/controlflow.html#if-statements) för att se exempel och lära er mer om for-loopar och if-satser. Skriv om den följande R-koden till Python-kod.

**R**

```{r}
numbers <- seq(1, 10)
for (number in numbers) {
    print(number)  
    if (number == 5) print("Five")
}
```

### (d) Funktioner

För att definera en funktion i R använder vi `function`, men i Python använder man istället `def` och sedan funktionsnamnet. Läs den här [dokumentationen](https://docs.python.org/3/tutorial/controlflow.html#defining-functions) och översätt följande kod.

**R**

```{r}
multiply <- function(x, y) {
    return(x * y)
}
multiply(2, 22)
```

### (e) Paket

R är gjort specifikt för statistik. Det gör R till ett mycket användbart språk för att göra just statistisk analys, även om man allt som oftast vill använda fler paket för att skriva kraftfullare kod (jag kan rekommendera `tidyverse` för dataanalys). Python är ett "general purpose programming language" och inte byggt för ett specifikt ändamål. Därför är Python väldigt begränsat utan att importera paket och för att göra statistisk analys så behöver vi ett antal paket. [`numpy`](https://numpy.org/) används för matematiska beräkningar och är ett väldigt vanligt paket, [`pandas`](https://pandas.pydata.org/) är populärt för att jobba med tabelldata, motsvarande `data.frames` i R, och [`matplotlib`](https://matplotlib.org/) är nog det vanligaste paketet för att visualisera data. Ni behöver inte läsa på om pakete, men ni ska använda dem (och inga andra) för att skriva om den följande koden från R till Python. Beräkna medelvärdet både genom att använda `numpy` och `pandas`.

**Tips**

För att importera paketen och ladda datamaterialet i Python så kan ni använda följande kod:

``` python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("https://raw.githubusercontent.com/fileds/umu_stat_b_python/main/penguins.csv")
```

Kan ni inte ladda paketen (ej Google Colab), se till att de är installerade. Annars kan ni installera dem så här

-   **Windows**: Öppna "Command Prompt" och skriv in följande kommando `py -m pip install --upgrade pip numpy pandas matplotlib`
-   **Mac**: Öppna "Terminal" och skriv in följande kommando `python3 -m pip install --upgrade pip numpy pandas matplotlib`

Om ni kör Python i **RStudio** så behöver ni installera Python-paketen genom följande kod:

```{r}
#| eval: false
reticulate::py_install("numpy")
reticulate::py_install("matplotlib")
reticulate::py_install("pandas")
```

**R**

```{r}
penguins <- read.csv("penguins.csv")
# Print head of data frame
head(penguins)
# Print head of species column
head(penguins$species)
# Compute mean of flipper_length_mm
mean(penguins$flipper_length_mm, na.rm = TRUE)
# Plot bill_length_mm vs bill_depth_mm
plot(penguins$bill_length_mm, penguins$bill_depth_mm)
```

### (f) Objektorienterad programmering

R är ett "functional programming languange" som lämpar sig för att använda funktioner på funktioner, därav "pipe"-operatorn. Python tillåter "functional programming" men mycket Python-kod är skrivet som "Object Oriented Programming (OOP)". Tanken med objektorienterad programmering är att jobba så mycket som möjligt med objekt som har inbyggda variabler, ibland kalalde fält, och funktioner, ibland kallade metoder. Ett annat kraftullt koncept inom objektorienterad programmering är arv: möjligheten för klasser att ärva från en superklass. Ni kan läsa mer om klasser [här](https://docs.python.org/3/tutorial/classes.html). 

I den här uppgiften ska ni skriva om R kod till objektorienterad Python kod. Först visar vi ett exempel på objectorienterad kod skriven i Python. I det här exemplet ser vi hur klassen `Bike` skapas genom att ärva klassen `Vehicle` och implementera funktionen `n_wheels` som returnerar antalet hjul fordonet har. Vi använder sedan punkt `.` för att komma åt fält och metoder inom klassen. Notera att `.` är reserverat för det här ändamålet i Python, ni kan därmed inte använda det i variabelnamn.

```{python}
# Define super class Vehicle
class Vehicle:
    def __init__(self, name):
        self.name = name
    
    # Define function returning the number of wheels of the vehicle
    def n_wheels(self):
        raise NotImplementedError("Subclass must implement this method")

# Defining Bike class, inheriting from Vehicle
class Bike(Vehicle):
    def n_wheels(self):
        return 2
    
bike = Bike("Crescent")
# Using the dot, ., to access class fields
bike.name
# Using the dot, ., to access class method
bike.n_wheels()
```

Baserat på det här exemplet, skriv om följande R-kod till Python-kod med en superklass `Animal` och två subklasser, `Dog` och `Cat` som implementerar funktionen `speak`.

**R**

```{r}
# Define the generic speak method
speak <- function(animal) {
    UseMethod("speak", animal)
}

# Define the Animal class constructor
Animal <- function(name) {
    class <- "Animal"
    list(name = name, class = class)
}

# Define the Dog class constructor
Dog <- function(name) {
    animal <- Animal(name)
    class(animal) <- c("Dog", class(animal))
    animal
}

# Define the Cat class constructor
Cat <- function(name) {
    animal <- Animal(name)
    class(animal) <- c("Cat", class(animal))
    animal
}

# Define the speak method for Animal (base)
speak.Animal <- function(animal) {
    stop("Subclass must implement this method")
}

# Define the speak method for Dog
speak.Dog <- function(animal) {
    paste(animal$name, "says Woof!")
}

# Define the speak method for Cat
speak.Cat <- function(animal) {
    paste(animal$name, "says Meow!")
}

# Demonstrating Polymorphism
animals <- list(Dog("Buddy"), Cat("Whiskers"))

for (animal in animals) {
    print(speak(animal))
}

```

## Uppgift 2 - Centrala gränsvärdessatsen

I den här uppgiften ska ni simulera medelvärdet från 1000 stickprov från (a) N$(2, 1)$ (b) Exp$(0.5)$, för tre olika stickprovsstorlekar, $N = 5, 10, 30$, och sedan visualisera era resultat i histogram. När börjar CGS att gälla? Översätt koden från R till Python.

**R**

```{r}
library(tidyverse)
set.seed(42)
n_replicates <- 1000
sample_sizes <- c(5, 10, 30)

# Storing in tibble, slow, but neat for plotting results
results <- tibble(
    sample_size = integer(0),
    replicate = integer(0),
    mean = numeric(0),
    distribution = character(0)
)
for (sample_size in sample_sizes)
{
    for (replicate in 1:n_replicates)
    {
        mu_norm <- mean(rnorm(sample_size, 2, 1))
        mu_exp <- mean(rexp(sample_size, 0.5))
        results <- rbind(
            results,
            data.frame(
                sample_size = sample_size,
                replicate = replicate,
                mean = mu_norm,
                distribution = "norm"),
            data.frame(
                sample_size = sample_size,
                replicate = replicate,
                mean = mu_exp,
                distribution = "exp"))
    }
}
results |> 
    ggplot(aes(x = mean, col = distribution, fill = distribution)) + 
    geom_density(alpha = 0.3) +
    facet_wrap(~ sample_size, scales = "free") +
  geom_vline(xintercept = 2, linetype = 2, col = "black") +
    labs(
        x = "Mean",
        col = "Distribution",
        fill = "Distribution") +
  theme_bw() +
  theme(
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    legend.position = "top")
```
